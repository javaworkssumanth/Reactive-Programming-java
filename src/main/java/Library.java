import java.io.FileNotFoundException;
import java.io.FileReader;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;

import reactor.core.publisher.Flux;
import reactor.core.publisher.GroupedFlux;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
	public boolean someLibraryMethod() {
		return true;
	}

	public static List<JsonObject> getActivity() {

		Gson gson = new Gson();
		JsonReader reader;
		List<JsonObject> data = null;
		Type REVIEW_TYPE = new TypeToken<List<JsonObject>>() {
		}.getType();
		try {
			reader = new JsonReader(new FileReader("db.json"));
			JsonObject jdata = gson.fromJson(reader, JsonObject.class); // convert response to JsonObject
			data = gson.fromJson(jdata.get("eventlist"), REVIEW_TYPE); /// get the event list and convert to list
																		/// collection type
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return data;

	}

	public static void main(String args[]) {


		/*Flux<JsonObject> seq2 = Flux.fromIterable(getActivity());
		seq2.subscribe(i -> {
			//System.out.println("Flux from iterable example :" + i); do something
		});*/

		/*Flux.just(1, 3, 5, 2, 4, 6, 11, 12, 13).groupBy(i -> i % 2 == 0 ? "even" : "odd")
				.concatMap(g -> g.defaultIfEmpty(-1) // if empty groups, show them
						.map(String::valueOf) // map to string
						.startWith(g.key()));// start with the group's key
*/		
		System.out.println(System.currentTimeMillis());
		Flux.just("range1").map(i -> {return getActivity(i);}) // this is the starting point where you loop the ranges , add some meta data if you want
		.subscribe( i -> { // this is the subscribe used in WebScocket . each item is a chunck
			System.out.println(i.size());
			for(Session s:i) {
				System.out.println("+++++++++++++++++++++++++++++++");
				for(Event e : s.getEventsList()) {
					System.out.println(e.getSessionID());
				}
			}
		}, error -> {} , () -> {/*on complete at the end of all chuncks , we can send this to UI to update events*/});  
		System.out.println(System.currentTimeMillis());
		
	}
// getting activity from service as independent function	
	private static List<Session> getActivity( String tr){
		
		List<Session> sessions = new ArrayList();
		
		Flux.fromIterable(getActivity()).map(i -> {
			return buildEvent(i);
		}).groupBy(i -> i.getSessionID()).map(i -> {
			return buildSession(i);
		}).subscribe( i -> {if(i!=null) sessions.add(i);});
		
		return sessions;
	}

	private static Event buildEvent(JsonObject obj) {

		Event ev = new Event();
		ev.setEventID(obj.get("eventID").toString());
		ev.setSessionID(obj.get("sessionID").toString());
		ev.setTimeStamp(obj.get("timestamp").toString());
		ev.setEventName(obj.get("eventName").toString());
		return ev;
	}
	private static Session buildSession(GroupedFlux<String, Event> i) {
		
		Session ses = new Session();
		List<Event>  events= new ArrayList<Event>();
		i.subscribe( j ->{  events.add(j) ;});
		
		ses.setEventsList(events);
		//check this group has AuthCLogin if not present return null ,add it to Orphan list 
		//if (has AuthC login ) then return TODO
		return ses;
		//else  add it to Orphan list and return null TODO
		
	}

}

class Session {

	public String getSessionID() {
		return sessionID;
	}

	public void setSessionID(String sessionID) {
		this.sessionID = sessionID;
	}

	public List<Event> getEventsList() {
		return eventsList;
	}

	public void setEventsList(List eventsList) {
		this.eventsList = eventsList;
	}

	String sessionID;
	List eventsList;

}

class Event {

	public String getEventID() {
		return eventID;
	}

	public void setEventID(String eventID) {
		this.eventID = eventID;
	}

	public String getSessionID() {
		return sessionID;
	}

	public void setSessionID(String sessionID) {
		this.sessionID = sessionID;
	}

	public String getTimeStamp() {
		return timeStamp;
	}

	public void setTimeStamp(String timeStamp) {
		this.timeStamp = timeStamp;
	}

	public String getEventName() {
		return eventName;
	}

	public void setEventName(String eventName) {
		this.eventName = eventName;
	}

	String eventID;
	String sessionID;
	String timeStamp;
	String eventName;

}